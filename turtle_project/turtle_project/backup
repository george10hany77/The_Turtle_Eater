"""
#!/usr/bin/env python3
import rclpy
from rclpy.node import Node
from my_custom_interfaces.srv import MoveTurtle
from my_custom_interfaces.msg import Coordinates2D
import math
from geometry_msgs.msg import Twist
from turtlesim.msg import Pose

class ControllerNode(Node):

    __hasArrived = False

    __curr_turtle_pose = Pose()

    def __init__(self):
        super().__init__("Controller_node")
        self.get_logger().info("Turtle Controller node has started")
        self.service = self.create_service(MoveTurtle, "Move", self.__cb_move_turtle)
        self.publisher = self.create_publisher(Twist, "/turtle1/cmd_vel", 20)
        self.subscriber = self.create_subscription(Pose, "/turtle1/pose", self.__cb_sub_turtle_pose, 20)
        self.tolerance = 0.1
    
    def __cb_sub_turtle_pose(self, pose: Pose):
        self.__curr_turtle_pose = pose

    def __cb_move_turtle(self, request, response):
        x_target = request.coordinates.x        
        y_target = request.coordinates.y

        self.get_logger().info(f"Request to move to x: {x_target}, y: {y_target}")

        self.move_turtle_to(x_target, y_target)
        if self.__hasArrived:
            response.success = True
        else:
            response.success = False

        return response

    def move_turtle_to(self, target_x, target_y):
        # Create a Twist message to control the turtle
        msg = Twist()

        # Calculate the distance to the target position
        distance = math.sqrt(
            (target_x - self.__curr_turtle_pose.x) ** 2 +
            (target_y - self.__curr_turtle_pose.y) ** 2
        )

        if distance > self.tolerance:
            self.__hasArrived = False

            # Calculate the angle to the target position
            angle_to_target = math.atan2(
                target_y - self.__curr_turtle_pose.y,
                target_x - self.__curr_turtle_pose.x
            )

            # Calculate the difference between the turtle's current heading and the target angle
            angle_diff = angle_to_target - self.__curr_turtle_pose.theta

            # Normalize the angle difference to the range [-pi, pi]
            angle_diff = math.atan2(math.sin(angle_diff), math.cos(angle_diff))

            # Proportional controller for linear velocity
            linear_speed = 1.5 * distance
            if linear_speed > 2.0:
                linear_speed = 2.0  # Cap the linear speed

            # Proportional controller for angular velocity
            angular_speed = 2.5 * angle_diff
            if angular_speed > 1.0:
                angular_speed = 1.0  # Cap the angular speed

            # Set the velocities
            msg.linear.x = linear_speed
            msg.angular.z = angular_speed

            # Log the distance and angle difference
            self.get_logger().info(f'Distance: {distance:.2f}, Angle difference: {angle_diff:.2f}')
        else:
            self.__hasArrived = True
            # Stop the turtle if within the target tolerance
            msg.linear.x = 0.0
            msg.angular.z = 0.0

            # Log that the turtle has reached the target
            self.get_logger().info('Reached the target position!')

        # Publish the velocity command
        self.publisher.publish(msg)

def main(args=None):
    rclpy.init(args=args)  # To start ROS 2 communication

    node = ControllerNode()
    rclpy.spin(node)

    rclpy.shutdown()  # To end ROS 2 communication

if __name__ == '__main__':
    main()
"""
#!/usr/bin/env python3
import rclpy
from rclpy.node import Node
from my_custom_interfaces.srv import MoveTurtle
from my_custom_interfaces.msg import Coordinates2D
import math
from geometry_msgs.msg import Twist
from turtlesim.msg import Pose

class ControllerNode(Node):

    __hasArrived = False
    __curr_turtle_pose = Pose()

    def __init__(self):
        super().__init__("Controller_node")
        self.get_logger().info("Turtle Controller node has started")
        self.service = self.create_service(MoveTurtle, "Move", self.__cb_move_turtle)
        self.publisher = self.create_publisher(Twist, "/turtle1/cmd_vel", 20)
        self.subscriber = self.create_subscription(Pose, "/turtle1/pose", self.__cb_sub_turtle_pose, 20)
        self.tolerance = 0.6

        # PID parameters
        self.kp_linear = 3.8
        self.ki_linear = 0.0
        self.kd_linear = 0.0
        self.kp_angular = 3.4
        self.ki_angular = 0.0
        self.kd_angular = 0.0

        # PID state
        self.integral_linear = 0.0
        self.prev_error_linear = 0.0
        self.integral_angular = 0.0
        self.prev_error_angular = 0.0
    
    def __cb_sub_turtle_pose(self, pose: Pose):
        self.__curr_turtle_pose = pose

    def __cb_move_turtle(self, request, response):
        x_target = request.coordinates.x        
        y_target = request.coordinates.y

        self.get_logger().info(f"Request to move to x: {x_target}, y: {y_target}")

        self.move_turtle_to(x_target, y_target)
        if self.__hasArrived:
            response.success = True
        else:
            response.success = False

        return response

    def move_turtle_to(self, target_x, target_y):
        # Create a Twist message to control the turtle
        msg = Twist()

        # Calculate the distance to the target position
        distance = math.sqrt(
            (target_x - self.__curr_turtle_pose.x) ** 2 +
            (target_y - self.__curr_turtle_pose.y) ** 2
        )

        if distance > self.tolerance:
            self.__hasArrived = False

            # Calculate the angle to the target position
            angle_to_target = math.atan2(
                target_y - self.__curr_turtle_pose.y,
                target_x - self.__curr_turtle_pose.x
            )

            # Calculate the difference between the turtle's current heading and the target angle
            angle_diff = angle_to_target - self.__curr_turtle_pose.theta

            # Normalize the angle difference to the range [-pi, pi]
            angle_diff = math.atan2(math.sin(angle_diff), math.cos(angle_diff))

            # Calculate linear and angular errors
            error_linear = distance
            error_angular = angle_diff

            # PID control for linear velocity
            self.integral_linear += error_linear
            derivative_linear = error_linear - self.prev_error_linear
            linear_speed = (
                self.kp_linear * error_linear +
                self.ki_linear * self.integral_linear +
                self.kd_linear * derivative_linear
            )
            # Cap the linear speed
            if linear_speed > 2.0:
                linear_speed = 2.0

            # PID control for angular velocity
            self.integral_angular += error_angular
            derivative_angular = error_angular - self.prev_error_angular
            angular_speed = (
                self.kp_angular * error_angular +
                self.ki_angular * self.integral_angular +
                self.kd_angular * derivative_angular
            )
            # Cap the angular speed
            if angular_speed > 1.0:
                angular_speed = 1.0

            # Update previous errors
            self.prev_error_linear = error_linear
            self.prev_error_angular = error_angular

            # Set the velocities
            msg.linear.x = linear_speed
            msg.angular.z = angular_speed

            # Log the distance and angle difference
            self.get_logger().info(f'Distance: {distance:.2f}, Angle difference: {angle_diff:.2f}')
        else:
            self.__hasArrived = True
            # Stop the turtle if within the target tolerance
            msg.linear.x = 0.0
            msg.angular.z = 0.0

            # Log that the turtle has reached the target
            self.get_logger().info('Reached the target position!')

        # Publish the velocity command
        self.publisher.publish(msg)

def main(args=None):
    rclpy.init(args=args)  # To start ROS 2 communication

    node = ControllerNode()
    rclpy.spin(node)

    rclpy.shutdown()  # To end ROS 2 communication

if __name__ == '__main__':
    main()





#!/usr/bin/env python3
import rclpy
from rclpy.node import Node
from my_custom_interfaces.srv import MoveTurtle
from my_custom_interfaces.msg import Coordinates2D
from geometry_msgs.msg import Pose


class spawnerNode(Node):
    def __init__(self):
        super().__init__("Spawner_node")
        self.client = self.create_client(MoveTurtle, "Move")

    def call_Move_service(self, coordinates):

        while not self.client.wait_for_service(1.0):
            self.get_logger().warn("Waiting for the server to be available...")

        req = MoveTurtle.Request()
        req.coordinates = coordinates

        self.future = self.client.call_async(request=req)

        self.future.add_done_callback(self.__cb_future_done)

    def __cb_future_done(self, future):
        try:
            res = future.result()
            self.get_logger().info(f"the response is: {res}")
            if res == True:
                print("the request has been processed successfully")
            else:
                print("the turtle is busy now ...")
        except:
            self.get_logger().error("response failed.... :(")



def main(args=None):
    rclpy.init(args=args) # to start ros2 communication

    node = spawnerNode()

    coordinates = Coordinates2D()
    coordinates.x = 5.8
    coordinates.y = 4.7
    
    node.call_Move_service(coordinates=coordinates)
    
    rclpy.spin(node)

    rclpy.shutdown() # to end ros2 communication

